from datetime import datetime, date
from random import randrange

class Bird():
    def __init__(self, ID: str, btype: str, birth: str, colors: list, foodtype: str, volume: int):
        if ID.check_id():
            self.ID=ID
        if btype.check_btype:
            self.btype=btype
        if birth.check_birth:
            self.birth=birth
        if colors.check_colors:
            self.colors=colors
        if foodtype.check_food:
            self.foodtype=foodtype
        if isinstance(volume,int):
            self.volume=volume
        else:raise ("illegal")
    def check_id(self,):
        if isinstance(self,str):
            for chr in self:
                if not chr.isupper() and not chr.isnumeric():
                    raise ValueError("thats not illegal id")
        return True
    def check_btype(self):
        type=["Zebra finch","Budgeriga","Love bird","Zebra finch"]
        if self in type:
            return True
        else:
            raise ValueError('thats not illegal type')
    def check_birth(self):
        if isinstance(self,str):
            x=self.split(":")
            if len(x)!=3:
                raise ValueError("illegal birth")
            for date in x:
                if not date.isnumeric():
                    raise ValueError("illegal birth")
            if   not(int(x[0])<=30 and int(x[0])>0 and int(x[1])<=12 and int(x[1])>=1 and int(x[2])>0 and int(x[2])<2023):
                raise ValueError("illegal")
            else: return True
    def check_color(self):
        if isinstance(self,list) and len(self)>=1:
            return True
        else:raise ValueError("illegal")
    def check_eat(self):
        food=['Corn','Seeds']
        if self not in food:
            raise ValueError("illegal")
        else:return True

    def get_age(self):
        date_t = date.today()
        n_day = date_t.day
        n_year = date_t.year
        n_month = date_t.month
        day, month, year = self.birth.split(":")
        age_year = n_year - int(year)
        age_month = n_month - int(month)
        age_day = n_day - int(day)
        if age_month < 0:
            age_year -= 1
            age_month += 12
        if age_day < 0:
            age_month -= 1
            age_day += 30
        return (str(age_year) + "Y," + str(age_month) + "M," + str(age_day) + "D")
    def get_ID(self):
        return self.ID
    def get_type(self):
        return self.btype

    def get_colors(self):
        return self.colors

    def get_food_type(self):
        return self.foodtype

    def get_volume(self):
        return self.volume

    def __str__(self):
        return ("Bird Id: "+str(self.get_ID())+"\n"+"Bird type: "+str(self.get_type())+"\n"+"Age: "+
                str(self.get_age())+"\n"+"Colors: "+str(self.get_colors())+
        "\n"+"Food types:"+str(self.get_food_type())+"\n")
    def __eq__(self, other):
        if isinstance(other,Bird):
            if self.btype==other.btype:
                return True
            else:return False
        else:raise ValueError("not a bird")

    def __lt__(self, other):
        if isinstance(other,Bird):
            return len(self.get_colors())<len(self.get_colors())
        else:raise ValueError("you are crazy")

    def __ge__(self, other):
        if isinstance(other,Bird):
            return len(self.get_colors())>len(self.get_colors())
        else:raise ValueError("iam a crazy") 
